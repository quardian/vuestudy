┌──────────────────────────────────────────────────────────────────────┐
   Vue 템플릿 문법
└──────────────────────────────────────────────────────────────────────┘

    - Vue의 템플릿 문법이란 화면을 조작하는 방법을 의미한다.
      템플릿 문법은 크게 데이터 바인딩과 디렉티브로 나뉜다.

      1. 데이터 바인딩

        - 데이터 바인딩은 Vue 인스턴스에서 정의한 속성들을 화면에 표시하는 방법이다.
        - 가장 기본적인 데이터 바인딩 방식은 콧수염 괄호(Mustache Tag) 이다.
        ┌──────────────────────────────────────────────────────────────────────┐
            <div>{{ message }} </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            new Vue( 
                data:{ 
                    message: 'Hello Vue.js' 
                } );
        └──────────────────────────────────────────────────────────────────────┘


      2. 디렉티브 

        -  화면 조작에 자주 사용되는 방식들을 모아 디렉티브  형태로 제공한다.

        1) v-if , v-else
            - loading 데이터 값이 true 면 보여주고, 아니면 v-else 를 보여준다. 
            - 조건에 해당되지 않으면, DOM 에서 해당 내용이 제거된다.

        2) v-show 
            - loading 조건이 true 이면 보여주고, false 이면 숨긴다.
              ( 숨김시, DOM에는 존재하며 style="display:none" 속성으로 숨김)
        ┌──────────────────────────────────────────────────────────────────────┐
            <div v-if="loading">
                Loading ...
            </div>
            <div v-else>
                test user has been logged in.
            </div>

            <div v-show="loading">
                loading
            </div>
                        
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            new Vue( 
                data:{ 
                   loading:true
                } );
        └──────────────────────────────────────────────────────────────────────┘
        
        3) computed
            - data 값이 변경되면, computed 속성값도 다시 계산한다.
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <p>{{ num }}</p>
                <p>{{ doubleNum }}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        num: 10
                    }, 
                    computed: {
                        doubleNum : function(){ return this.num * 2; }
                    }
                });
        └──────────────────────────────────────────────────────────────────────┘        

        3) v-bind
            - v-bind:{속성명}={데이터필드}
              {속성명}의 값을 data의 있는 {데이터필드}의 값으로 바인딩 한다. (단방향)
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <p v-bind:id="uuid">{{ num }}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        uuid: 'abc1234'
                    }, 

                });
        └──────────────────────────────────────────────────────────────────────┘              

        4) v-model
            - 양방향 바인딩
              . input   값 변경시 --> message 값 변경
              . message 값 변경시 --> input   값 변경
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <input type="text" v-model="message">
                <p>{{message}}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        message:''
                    }, 
                });
        └──────────────────────────────────────────────────────────────────────┘   

        5) v-on
            - 지정 이벤트 발생시, 메소드 호출
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <button 
                    v-on:click="onClickMe">click me</button>
                <input type="text" 
                    v-on:keyup="onKeyup" 
                    v-on:keyup.enter="onEnter"  />
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                el: '#app',
                data:  {
                }, 
                methods:{
                    onClickMe: function(){
                        console.log('onClickMe');
                    },
                    onKeyup : function(){
                        console.log('onKeyup');
                    },
                    onEnter : function(){
                        console.log('onEnter');
                    }
                }
            });
        └──────────────────────────────────────────────────────────────────────┘       

        5) watch 속성
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <button 
                    v-on:click="onClickIncrease">increase</button>
                <p>{{num}}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
                var vm = new Vue({
                        el: '#app',
                        data:  {
                            num: 10
                        }, 
                        watch: {
                            num : function(){
                                // num 데이터 변경시 마다 호출됨.
                                this.logText();   
                            }
                        },
                        methods:{
                            onClickIncrease: function(){
                                this.num++;
                            },

                            logText:function(){
                                console.log('changed');
                            },
                        }
                    });

                });
        └──────────────────────────────────────────────────────────────────────┘       


        6) watch 와 computed 차이 
            -  Computed는 라이프 사이클에 영향을 받지 않습니다. 
               template 내부에 선언된 computed 중에서 해당 함수와 연결된 
                값이 바뀔 때만 해당 Computed가 재 연산을 합니다.

            - Computed는 다른 함수 같은 영역에서 호출이 안되지만 Method는 가능합니다.

            - Watch은 특정 데이터의 변화를 감지하여 자동으로 특정 로직을 수행하는 속성입니다.

            - 대부분은 computed 속성 사용월 권장한다.
              다만, 데이터 변경으 ㅣ응답으로 비동기식 계산이 필요한 경우나 시간이 많이 
              소요되는 계산을 할 때 watch를 사용하는 것이 좋다. (API 호출 등)
       ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <button v-on:click="onClickIncrease">increase</button>
                <p>{{num}}</p>
                <p>{{ doubleNum }}</p>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
            <script>
                var vm = new Vue({
                        el: '#app',
                        data:  {
                            num: 10
                        }, 

                        computed: {
                            doubleNum : function(){ return this.num * 2; }
                        },

                        watch: {
                            // num 데이터 변경시 호출됨.
                            num : function(newValue, oldValue){
                                this.fetchUserByNumber(newValue);   
                            }
                        },
                        
                        methods:{
                            onClickIncrease: function(){
                                this.num++;
                            },

                            fetchUserByNumber:function(num){
                                console.log(num);
                            },
                        }
                    });

                console.log(vm);
            </script>
        └──────────────────────────────────────────────────────────────────────┘       
