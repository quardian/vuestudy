┌──────────────────────────────────────────────────────────────────────┐
   Vue 템플릿 문법
└──────────────────────────────────────────────────────────────────────┘

    - Vue의 템플릿 문법이란 화면을 조작하는 방법을 의미한다.
      템플릿 문법은 크게 데이터 바인딩과 디렉티브로 나뉜다.

      1. 데이터 바인딩

        - 데이터 바인딩은 Vue 인스턴스에서 정의한 속성들을 화면에 표시하는 방법이다.
        - 가장 기본적인 데이터 바인딩 방식은 콧수염 괄호(Mustache Tag) 이다.
        ┌──────────────────────────────────────────────────────────────────────┐
            <div>{{ message }} </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            new Vue( 
                data:{ 
                    message: 'Hello Vue.js' 
                } );
        └──────────────────────────────────────────────────────────────────────┘


      2. 디렉티브 

        -  화면 조작에 자주 사용되는 방식들을 모아 디렉티브  형태로 제공한다.

        1) v-if , v-else
            - loading 데이터 값이 true 면 보여주고, 아니면 v-else 를 보여준다. 
            - 조건에 해당되지 않으면, DOM 에서 해당 내용이 제거된다.

        2) v-show 
            - loading 조건이 true 이면 보여주고, false 이면 숨긴다.
              ( 숨김시, DOM에는 존재하며 style="display:none" 속성으로 숨김)
        ┌──────────────────────────────────────────────────────────────────────┐
            <div v-if="loading">
                Loading ...
            </div>
            <div v-else>
                test user has been logged in.
            </div>

            <div v-show="loading">
                loading
            </div>
                        
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            new Vue( 
                data:{ 
                   loading:true
                } );
        └──────────────────────────────────────────────────────────────────────┘
        
        3) computed
            - data 값이 변경되면, computed 속성값도 다시 계산한다.
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <p>{{ num }}</p>
                <p>{{ doubleNum }}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        num: 10
                    }, 
                    computed: {
                        doubleNum : function(){ return this.num * 2; }
                    }
                });
        └──────────────────────────────────────────────────────────────────────┘        

        3) v-bind
            - v-bind:{속성명}={데이터필드}
              {속성명}의 값을 data의 있는 {데이터필드}의 값으로 바인딩 한다. (단방향)
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <p v-bind:id="uuid">{{ num }}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        uuid: 'abc1234'
                    }, 

                });
        └──────────────────────────────────────────────────────────────────────┘              

        4) v-model
            - 양방향 바인딩
              . input   값 변경시 --> message 값 변경
              . message 값 변경시 --> input   값 변경
        ┌──────────────────────────────────────────────────────────────────────┐
            <div id="app">
                <input type="text" v-model="message">
                <p>{{message}}</p>
            </div>
        └──────────────────────────────────────────────────────────────────────┘
       ┌──────────────────────────────────────────────────────────────────────┐
            var vm = new Vue({
                    el: '#app',
                    data:  {
                        message:''
                    }, 
                });
        └──────────────────────────────────────────────────────────────────────┘   